library("dplyr")
library("data.table")
library("R.utils")
ufo_data <- data.table::fread("./data/UFOCoords.csv.bz2")
distinct_states <- distinct(ufo_data, State)
distinct_shapes <- distinct(ufo_data, Shape)
my_server <- function(input, output)({
#message that changes in response to input
output$message <- renderText({
return(paste("This is the UFO sighting data for ", input$state,
". Select more UFO shapes to display the proportions of
each in ", input$state, ". Click the drop down menu
to change the state."))
})
output$drop <- renderUI({
selectInput("state", "Choose a State", distinct_states)
})
output$box <- renderUI({
checkboxGroupInput("shape", "Choose Shapes", distinct_shapes$Shape, selected = distinct_shapes$Shape[1:4])
})
#create pie chart that displays proportions of UFO shapes in selected state
output$graph <- renderPlot({
subset<- ufo_data %>%
filter(Shape == input$shape) %>%
filter(State == input$state)
ggplot(subset, aes(x="", y="", fill = Shape))+
geom_bar(width = 1, stat = "identity")+
coord_polar(theta = "y")+
labs(title = "Pie chart of UFO Shapes")
})
})
shinyServer(my_server)
runApp()
runApp()
sum <- nrow(subset)
sum <- nrow(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
subset <- reactive({
data <- ufo_data %>%
filter(which(input$shape %in% Shape)) %>%
filter(State == input$state)
return(data)
})
data <- ufo_data %>%
filter(which(input$shape %in% Shape)) %>%
filter(State == input$state)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
})
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
events <- read.csv("../data/athlete_events.csv")
events <- read.csv("data/athlete_events.csv")
setwd("C:/Users/ERroc/Desktop/INFO201/info201GroupProject")
events <- read.csv("./data/athlete_events.csv")
View(events)
regions <- read.csv("./data/noc_regions.csv")
View(regions)
View(events)
ggplot(events, aes(x = Team, y = Medal)) +
geom_point(size = 2)
data  <- select(events, Team, Medal)
View(regions)
View(events)
View(data)
View(events)
data  <- select(events, Team, NOC, Medal)
View(data)
data  <- select(events, Team, NOC, Medal) %>%
group_by(NOC) %>%
summarize(
n()
)
events <- read.csv("./data/athlete_events.csv")
data  <- select(events, Team, NOC, Medal) %>%
group_by(NOC) %>%
summarize(
n()
)
View(data)
source('C:/Users/ERroc/Desktop/INFO201/info201GroupProject/scatterPlot.R', echo=TRUE)
medal <- evens %>%
group_by(Medal) %>%
summarize(
n()
)
region  <- events %>%
group_by(NOC) %>%
summarize(
n()
)
medal <- events %>%
group_by(Medal) %>%
summarize(
n()
)
View(medal)
ggplot(events, aes(x = nrow(Team), y = Medal)) +
geom_point(size = 2)
ggplot_freqpoly(events, aes(x = Team, y = Medal)) +
geom_point(size = 2)
ggplot(events) +
geom_frqpoly(aes(x = Team, y = Medal))
ggplot(events) +
geom_freqpoly(aes(x = Team, y = Medal))
ggplot(events) +
geom_freqpoly(aes(x = Team))
ggplot(events) +
geom_freqpoly(aes(x = Team, stat = "count"))
ggplot(events) +
geom_freqpoly(aes(x = Team, y = ..density..))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/ERroc/Desktop/INFO201/info201GroupProject")
runApp()
runApp()
runApp()
runApp()
library("shiny")
library("dplyr")
library("ggplot2")
events <- read.csv("./data/athlete_events.csv")
my_server <- function(input, output)({
output$medalChoice <- renderUI({
checkBoxGroupInput("medal", "Choose what medals to display", events$Medal )
})
# output$scatter <- renderPlot{
# }
output$pract <- renderText({
paste("practice")
})
})
shinyServer(my_server)
runApp()
runApp()
runApp()
runApp()
ggplot(events) +
geom_count(aes(x = Team, y = Medals))
ggplot(events) +
geom_count(aes(x = Team, y = Medal))
ggplot(data = events, aes(x = Team, y = Medal)) +
geom_count()
events <- select(events, Team, NOC, Medal)
View(events)
View(data)
View(region)
region  <- events %>%
group_by(NOC) %>%
summarize(
n(),
count(Medal)
)
region  <- events %>%
count(Medal)
View(region)
region  <- events %>%
count(NOC)
View(region)
region  <- events %>%
count(NOC) %>%
count(Medal)
region  <- events %>%
count(NOC, Medal)
View(region)
summary  <- events %>%
count(NOC)
sum <- table(events$Medal)
sum <- as.data.frame(sum, stringAsFactors = FALSE)
View(sum)
sum <- table(events$NOC)
sum <- as.data.frame(sum, stringAsFactors = FALSE)
View(sum)
sum <- table(events$NOC, events$Medal)
sum <- as.data.frame(sum, stringAsFactors = FALSE)
View(sum)
summary  <- events %>%
group_by(NOC) %>%
summary(
n(Medal == "Bronze")
)
summary  <- events %>%
group_by(NOC) %>%
summary(
count(Medal == "Bronze")
)
summary  <- events %>%
count(NOC)
View(sum)
sum <- table(events$NOC, events$Medal == Gold)
sum <- table(events$NOC, events$Medal == "Gold")
sum <- as.data.frame(sum, stringAsFactors = FALSE)
View(sum)
sum <- filter(sum, Var2 != "FALSE")
View(sum)
colnames(sum)[2] <- "Gold"
sum <- table(events$NOC, events$Medal == "Gold")
sum <- as.data.frame(sum, stringAsFactors = FALSE)
sum <- filter(sum, Var2 != "FALSE")
colnames(sum)[2] <- "Gold"
View(sum)
colnames(sum)[3] <- "Gold Frequency"
sum <- table(events$NOC, events$Medal == "Gold")
sum <- as.data.frame(sum, stringAsFactors = FALSE)
sum <- filter(sum, Var2 != "FALSE")
colnames(sum)[2] <- "Gold"
colnames(sum)[3] <- "GoldFrequency"
View(sum)
create_count <- function(df, medal){
sum <- table(df$NOC, df$Medal == medal)
sum <- as.data.frame(sum, stringAsFactors = FALSE)
sum <- filter(sum, Var2 != "FALSE")
colnames(sum)[2] <- medal
colnames(sum)[3] <- paste(medal, "Frequency")
}
gold <- create_count(events, "Gold")
create_count <- function(df, medal){
sum <- table(df$NOC, df$Medal == medal)
sum <- as.data.frame(sum, stringAsFactors = FALSE)
sum <- filter(sum, Var2 != "FALSE")
colnames(sum)[2] <- medal
colnames(sum)[3] <- paste(medal, "Frequency")
return(sum)
}
gold <- create_count(events, "Gold")
View(gold)
gold <- create_count(events, "Gold")
silver <- create_count(events, "Silver")
bronze <- create_count(events, "Bronze")
noc_count  <- events %>%
count(NOC)
medal_count <- function(df, medal){
sum <- table(df$NOC, df$Medal == medal)
sum <- as.data.frame(sum, stringAsFactors = FALSE)
sum <- filter(sum, Var2 != "FALSE")
colnames(sum)[2] <- medal
colnames(sum)[3] <- paste(medal, "Frequency")
return(sum)
}
gold <- medal_count(events, "Gold")
silver <- medal_count(events, "Silver")
events <- read.csv("./data/athlete_events.csv")
events <- select(events, Team, NOC, Medal)
noc_count  <- events %>%
count(NOC)
medal_count <- function(df, medal){
sum <- table(df$NOC, df$Medal == medal)
sum <- as.data.frame(sum, stringAsFactors = FALSE)
sum <- filter(sum, Var2 != "FALSE")
colnames(sum)[2] <- medal
colnames(sum)[3] <- paste(medal, "Frequency")
return(sum)
}
gold <- medal_count(events, "Gold")
silver <- medal_count(events, "Silver")
bronze <- medal_count(events, "Bronze")
summary <- full_join(gold, silver, bronze, noc_count, by = "NOC")
View(noc_count)
View(silver)
noc_count  <- events %>%
count(NOC, Medal == "Gold")
View(noc_count)
View(gold)
noc_count  <- events %>%
count(NOC, Medal == "Gold", Medal == "Silver")
View(noc_count)
noc_count  <- events %>%
count(NOC, Medal == "Gold", Medal == "Silver", Medal == "Bronze")
View(noc_count)
##try to use group by and summarize
sm <- events %>%
group_by(NOC, Medal) %>%
summarise(
Freq = n()
)
View(silver)
View(sm)
noc_count  <- events %>%
count(NOC, Medal)
View(noc_count)
noc_count  <- events %>%
count(NOC, Medal == "Gold")
View(noc_count)
noc_count  <- events %>%
filter(Medal == "Gold")
count(NOC)
View(noc_count)
noc_count  <- events %>%
filter(Medal == "Gold") %>%
count(NOC)
View(noc_count)
gold_count  <- events %>%
filter(Medal == "Gold") %>%
count(NOC)
silver_count <- events %>%
filter(Medal == "Silver") %>%
count(NOC)
yep <- full_join(gold_count, silver_count, by = "NOC")
View(yep)
View(silver_count)
gold_count  <- events %>%
filter(Medal == "Gold") %>%
count(NOC) %>%
colnames()[2] <- "GoldCount"
colnames(gold_count)[2] <- "GoldCount"
View(gold_count)
noc_count  <- events %>%
count(NOC)
colnames(gold_count)[2] <- "NOCCount"
View(noc_count)
yep <- join_all(c(gold_count, silver_count, bronze_count), by = "NOC")
install.packages("plyr")
install.packages("plyr")
library("ggplot2")
library("plyr")
yep <- join_all(list(gold_count, silver_count, bronze_count), by = "NOC")
yep <- full_join(gold_count, silver_count, by = "NOC") %>%
full_join(bronze_count, by = "NOC") %>%
full_join(noc_count, by = "NOC")
bronze_count <- events %>%
filter(Medal == "Bronze") %>%
count(NOC)
colnames(silver_count)[2] <- "BronzeCount"
yep <- full_join(gold_count, silver_count, by = "NOC") %>%
full_join(bronze_count, by = "NOC") %>%
full_join(noc_count, by = "NOC")
View(yep)
gold_count  <- events %>%
filter(Medal == "Gold") %>%
count(NOC)
colnames(gold_count)[2] <- "GoldCount"
silver_count <- events %>%
filter(Medal == "Silver") %>%
count(NOC)
colnames(silver_count)[2] <- "SilverCount"
bronze_count <- events %>%
filter(Medal == "Bronze") %>%
count(NOC)
colnames(silver_count)[2] <- "BronzeCount"
yep <- full_join(gold_count, silver_count, by = "NOC") %>%
full_join(bronze_count, by = "NOC") %>%
full_join(noc_count, by = "NOC")
View(yep)
colnames(silver_count)[2] <- "SilverCount"
colnames(gold_count)[2] <- "NOCCount"
bronze_count <- events %>%
filter(Medal == "Bronze") %>%
count(NOC)
colnames(silver_count)[2] <- "BronzeCount"
yep <- full_join(noc_count, gold_count, by = "NOC") %>%
full_join(silver_count, by = "NOC") %>%
full_join(bronze_count, by = "NOC")
View(yep)
colnames(silver_count)[2] <- "BronzeCount"
yep <- left_join(noc_count, gold_count, by = "NOC") %>%
left_join(silver_count, by = "NOC") %>%
left_join(bronze_count, by = "NOC")
View(yep)
yep <- left_join(noc_count, gold_count, by = "NOC")
View(yep)
noc_count  <- events %>%
count(NOC)
View(noc_count)
gold_count  <- events %>%
filter(Medal == "Gold") %>%
count(NOC)
colnames(gold_count)[2] <- "GoldCount"
View(gold_count)
silver_count <- events %>%
filter(Medal == "Silver") %>%
count(NOC)
colnames(silver_count)[2] <- "SilverCount"
bronze_count <- events %>%
filter(Medal == "Bronze") %>%
count(NOC)
colnames(silver_count)[2] <- "BronzeCount"
yep <- left_join(noc_count, gold_count, by = "NOC")
View(yep)
yep <- left_join(yep, silver_count, by = "NOC")
View(yep)
yep <- left_join(yep, bronze_count, by = "NOC")
View(yep)
View(silver_count)
View(silver_count)
library("dplyr")
library("ggplot2")
events <- read.csv("./data/athlete_events.csv")
events <- select(events, Team, NOC, Medal)
noc_count  <- events %>%
count(NOC)
gold_count  <- events %>%
filter(Medal == "Gold") %>%
count(NOC)
colnames(gold_count)[2] <- "GoldCount"
silver_count <- events %>%
filter(Medal == "Silver") %>%
count(NOC)
colnames(silver_count)[2] <- "SilverCount"
bronze_count <- events %>%
filter(Medal == "Bronze") %>%
count(NOC)
colnames(silver_count)[2] <- "BronzeCount"
yep <- left_join(noc_count, gold_count, by = "NOC")
yep <- left_join(yep, silver_count, by = "NOC")
yep <- left_join(yep, bronze_count, by = "NOC")
View(yep)
View(silver_count)
silver_count <- events %>%
filter(Medal == "Silver") %>%
count(NOC)
colnames(silver_count)[2] <- "WHAT"
View(silver_count)
silver_count <- events %>%
filter(Medal == "Silver") %>%
count(NOC)
colnames(silver_count)[2] <- "SilverCount"
View(silver_count)
View(bronze_count)
bronze_count <- events %>%
filter(Medal == "Bronze") %>%
count(NOC)
colnames(silver_count)[2] <- "BronzeCount"
View(bronze_count)
colnames(silver_count)[2] <- "BronzeCount"
View(bronze_count)
colnames(silver_count)[2] <- "Whate"
View(bronze_count)
View(gold_count)
yep <- left_join(noc_count, gold_count, by = "NOC")
yep <- left_join(yep, silver_count, by = "NOC")
yep <- left_join(yep, bronze_count, by = "NOC")
View(yep)
colnames(silver_count)[2] <- "BronzeCount"
View(bronze_count)
